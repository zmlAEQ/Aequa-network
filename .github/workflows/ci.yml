name: ci
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
permissions:
  contents: read
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.24'
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          args: --timeout=5m
  build-test:
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.24'
      - name: Build
        run: go build ./cmd/dvt-node
      - name: Unit tests with coverage
        run: go test ./internal/api -coverprofile=coverage.out -covermode=atomic
      - name: Print coverage summary
        run: go tool cover -func=coverage.out
      - name: Enforce coverage threshold
        env:
          COVERAGE_MIN: ${{ vars.COVERAGE_MIN }}
        run: |
          set -euo pipefail
          total=$(go tool cover -func=coverage.out | awk '/total:/ {print $3}')
          pct=${total%*%}
          thr_env=${COVERAGE_MIN:-40}
          thr=$(awk -v e="$thr_env" 'BEGIN{t=e+0; if (t<40) t=40; print t}')
          echo "coverage=$pct% (threshold=$thr%)"
          awk -v p=$pct -v t=$thr 'BEGIN{ exit (p+0 < t+0) ? 1 : 0 }'
      - name: Govulncheck
        uses: golang/govulncheck-action@v1
        with:
          go-version-input: '1.24'
          work-dir: .
