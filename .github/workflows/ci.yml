name: ci
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
permissions:
  contents: read
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true
jobs:
  verify-bom:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Check UTF-8 BOM not present in .go files
        shell: bash
        run: |
          set -euo pipefail
          err=0
          while IFS= read -r -d '' f; do
            if grep -Iq $'\xEF\xBB\xBF' "$f"; then
              echo "::error file=$f::BOM found"
              err=1
            fi
          done < <(git ls-files -z '*.go')
          test $err -eq 0
  lint:
    runs-on: ubuntu-latest
    needs: [verify-bom]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.24'
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          args: --timeout=5m
  build-test:
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.24'
      - name: Build
        run: go build ./cmd/dvt-node
      - name: Unit tests with coverage
        run: go test ./internal/api -coverprofile=coverage.out -covermode=atomic
      - name: Print coverage summary
        run: go tool cover -func=coverage.out
      - name: Enforce coverage threshold
        env:
          COVERAGE_MIN: ${{ vars.COVERAGE_MIN }}
        run: |
          set -euo pipefail
          total=$(go tool cover -func=coverage.out | awk '/total:/ {print $3}')
          pct=${total%*%}
          thr_env=${COVERAGE_MIN:-50}
          thr=$(awk -v e="$thr_env" 'BEGIN{t=e+0; if (t<50) t=50; print t}')
          echo "coverage=$pct% (threshold=$thr%)"
          awk -v p=$pct -v t=$thr 'BEGIN{ exit (p+0 < t+0) ? 1 : 0 }'
      - name: Govulncheck
        uses: golang/govulncheck-action@v1
        with:
          go-version-input: '1.24'
          work-dir: .

  security-snyk:
    runs-on: ubuntu-latest
    needs: [build-test]
    # Run on internal PRs (non-fork) and on main branch pushes
    if: (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository) || github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
      - name: Verify SNYK_TOKEN is configured
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          if [ -z "$SNYK_TOKEN" ]; then
            echo "::error::Missing SNYK_TOKEN secret. Generate a Snyk API token and add it in Settings → Secrets → Actions as SNYK_TOKEN";
            exit 1;
          fi
      - name: Snyk Open Source (Go)
        uses: snyk/actions/golang@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test
          args: --severity-threshold=high --all-projects
